openapi: 3.0.3
info:
  title: Brewanator API
  description: API for the Brewanator backend service
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Development server
paths:
  /health:
    get:
      summary: Health check
      description: Returns the health status of the service
      responses:
        '200':
          description: Service is healthy
          content:
            text/plain:
              schema:
                type: string
                example: "OK"
  
  /api/packages:
    get:
      operationId: listPackages
      summary: List installed packages
      description: Returns a list of all packages installed via Homebrew
      responses:
        '200':
          description: List of installed packages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrewListResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message

  /api/packages/{packageName}:
    get:
      operationId: getPackageInfo
      summary: Get package information
      description: Returns detailed information about a specific package including dependencies and dependents
      parameters:
        - name: packageName
          in: path
          required: true
          description: Name of the package to get information for
          schema:
            type: string
            example: "node"
      responses:
        '200':
          description: Package information with dependencies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrewPackageInfo'
        '400':
          description: Bad request - package name is required
          content:
            text/plain:
              schema:
                type: string
                example: "Package name is required"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrewPackageInfo'

  /api/packages/search/{query}:
    get:
      operationId: searchPackages
      summary: Search for packages
      description: Searches for packages using the brew search command
      parameters:
        - name: query
          in: path
          required: true
          description: Search query to find packages
          schema:
            type: string
            example: "python"
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrewCommandResult'
        '400':
          description: Bad request - search query is required
          content:
            text/plain:
              schema:
                type: string
                example: "Search query is required"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrewCommandResult'

  /api/packages/last-update:
    get:
      operationId: getLastUpdateTime
      summary: Get last update time
      description: Returns the timestamp of when Homebrew was last updated
      responses:
        '200':
          description: Last update time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrewCommandResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrewCommandResult'

  /api/packages/upgrade:
    post:
      operationId: updateAndUpgrade
      summary: Update and upgrade Homebrew
      description: Updates Homebrew itself and then upgrades all installed packages
      responses:
        '200':
          description: Update and upgrade completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrewCommandResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrewCommandResult'

  /api/packages/doctor:
    post:
      operationId: runDoctor
      summary: Run brew doctor
      description: Runs brew doctor to diagnose and fix common Homebrew issues
      responses:
        '200':
          description: Brew doctor completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrewCommandResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrewCommandResult'

  /api/packages/{packageName}/install:
    post:
      operationId: installPackage
      summary: Install a package
      description: Installs a package using the brew install command
      parameters:
        - name: packageName
          in: path
          required: true
          description: Name of the package to install
          schema:
            type: string
            example: "node"
      responses:
        '200':
          description: Package installation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrewCommandResult'
        '400':
          description: Bad request - package name is required
          content:
            text/plain:
              schema:
                type: string
                example: "Package name is required"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrewCommandResult'

  /api/packages/{packageName}/uninstall:
    delete:
      operationId: uninstallPackage
      summary: Uninstall a package
      description: Uninstalls a package using the brew uninstall command
      parameters:
        - name: packageName
          in: path
          required: true
          description: Name of the package to uninstall
          schema:
            type: string
            example: "node"
      responses:
        '200':
          description: Package uninstallation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrewCommandResult'
        '400':
          description: Bad request - package name is required
          content:
            text/plain:
              schema:
                type: string
                example: "Package name is required"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrewCommandResult'

  /api/packages/{packageName}/commands:
    get:
      operationId: getPackageCommands
      summary: Get package commands
      description: Returns the commands that a package provides once installed
      parameters:
        - name: packageName
          in: path
          required: true
          description: Name of the package to get commands for
          schema:
            type: string
            example: "node"
      responses:
        '200':
          description: Package commands retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrewPackageCommands'
        '400':
          description: Bad request - package name is required
          content:
            text/plain:
              schema:
                type: string
                example: "Package name is required"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrewPackageCommands'

  /api/tldr/{command}:
    get:
      operationId: getTldrInfo
      summary: Get tldr information for a command
      description: Retrieves concise usage examples and explanations for a command using tldr
      parameters:
        - name: command
          in: path
          required: true
          description: The command name to get tldr information for
          schema:
            type: string
            example: "git"
      responses:
        '200':
          description: Tldr information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TldrResult'
        '400':
          description: Bad request - command name is required
          content:
            text/plain:
              schema:
                type: string
                example: "Command name is required"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TldrResult'

  /api/cache/stats:
    get:
      operationId: getCacheStats
      summary: Get cache statistics
      description: Returns statistics about the cache including hit rate, total entries, and valid entries
      responses:
        '200':
          description: Cache statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CacheStats'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CacheStats'

  /api/cache/clear:
    delete:
      operationId: clearCache
      summary: Clear the cache
      description: Clears all cached data and resets cache statistics
      responses:
        '200':
          description: Cache cleared successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Cache cleared successfully"
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "Error clearing cache: {error message}"

  /api/cache/pre-populate:
    post:
      operationId: prePopulateCache
      summary: Pre-populate cache with all installed packages
      description: Starts background pre-population of cache with information for all installed packages
      responses:
        '200':
          description: Cache pre-population started in background
          content:
            text/plain:
              schema:
                type: string
                example: "Cache pre-population started in background"
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "Error starting cache pre-population: {error message}"

  /api/cache/pre-populate/limited:
    post:
      operationId: prePopulateLimitedCache
      summary: Pre-populate cache with limited number of packages
      description: Starts background pre-population of cache with information for a limited number of installed packages
      parameters:
        - name: limit
          in: query
          required: false
          description: "Maximum number of packages to pre-populate (default: 20)"
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
            example: 10
      responses:
        '200':
          description: Limited cache pre-population started in background
          content:
            text/plain:
              schema:
                type: string
                example: "Limited cache pre-population started in background with limit: 10"
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "Error starting limited cache pre-population: {error message}"

  /api/cache/pre-populate/{packageName}:
    post:
      operationId: prePopulateSpecificPackage
      summary: Pre-populate cache for specific package
      description: Starts background pre-population of cache with information for a specific package
      parameters:
        - name: packageName
          in: path
          required: true
          description: Name of the package to pre-populate cache for
          schema:
            type: string
            example: "node"
      responses:
        '200':
          description: Specific package cache pre-population started in background
          content:
            text/plain:
              schema:
                type: string
                example: "Cache pre-population for node started in background"
        '400':
          description: Bad request - package name is required
          content:
            text/plain:
              schema:
                type: string
                example: "Package name is required"
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "Error starting cache pre-population: {error message}"

components:
  schemas:
    BrewListResult:
      type: object
      properties:
        packages:
          type: array
          items:
            $ref: '#/components/schemas/BrewPackage'
          description: List of installed packages
        isSuccess:
          type: boolean
          description: Whether the command executed successfully
        errorMessage:
          type: string
          nullable: true
          description: Error message if the command failed
        totalCount:
          type: integer
          description: Total number of packages
      required:
        - packages
        - isSuccess
        - totalCount
    
    BrewPackage:
      type: object
      properties:
        name:
          type: string
          description: Package name
        version:
          type: string
          nullable: true
          description: Package version (if available)
      required:
        - name

    BrewCommandResult:
      type: object
      properties:
        isSuccess:
          type: boolean
          description: Whether the command executed successfully
        output:
          type: string
          description: The command output
        errorMessage:
          type: string
          nullable: true
          description: Error message if the command failed
        exitCode:
          type: integer
          description: Exit code of the command
      required:
        - isSuccess
        - output

    BrewPackageInfo:
      type: object
      properties:
        name:
          type: string
          description: Package name
        description:
          type: string
          nullable: true
          description: Package description
        version:
          type: string
          nullable: true
          description: Package version
        dependencies:
          type: array
          items:
            type: string
          description: List of packages this package depends on
        dependents:
          type: array
          items:
            type: string
          description: List of packages that depend on this package
        output:
          type: string
          description: The command output from brew info
        isSuccess:
          type: boolean
          description: Whether the command executed successfully
        errorMessage:
          type: string
          nullable: true
          description: Error message if the command failed
      required:
        - name
        - output
        - isSuccess
        - dependencies
        - dependents

    BrewPackageCommands:
      type: object
      properties:
        packageName:
          type: string
          description: Name of the package
        commands:
          type: array
          items:
            type: string
          description: List of commands provided by the package
        isSuccess:
          type: boolean
          description: Whether the command executed successfully
        errorMessage:
          type: string
          nullable: true
          description: Error message if the command failed
        exitCode:
          type: integer
          description: Exit code of the command
      required:
        - packageName
        - commands
        - isSuccess

    TldrResult:
      type: object
      properties:
        command:
          type: string
          description: The command name
        output:
          type: string
          description: The tldr output for the command
        isSuccess:
          type: boolean
          description: Whether the tldr command executed successfully
        errorMessage:
          type: string
          nullable: true
          description: Error message if the command failed
        exitCode:
          type: integer
          description: Exit code of the tldr command
      required:
        - command
        - output
        - isSuccess
        - exitCode

    CacheStats:
      type: object
      properties:
        totalEntries:
          type: integer
          description: Total number of entries in the cache
        validEntries:
          type: integer
          description: Number of valid (non-expired) entries in the cache
        expiredEntries:
          type: integer
          description: Number of expired entries in the cache
        hitCount:
          type: integer
          description: Total number of cache hits
        missCount:
          type: integer
          description: Total number of cache misses
        hitRate:
          type: number
          format: double
          description: Cache hit rate as a decimal (0.0 to 1.0)
      required:
        - totalEntries
        - validEntries
        - expiredEntries
        - hitCount
        - missCount
        - hitRate
